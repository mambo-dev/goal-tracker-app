// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  user_id          Int                @id @default(autoincrement())
  user_username    String             @unique
  user_email       String             @unique
  user_password    String
  user_account     Account?
  user_goals       Goal[]
  user_streaks     Streak[]
  AnalyticsTracker AnalyticsTracker[]
}

model Account {
  account_id                  Int     @id @default(autoincrement())
  account_user                User    @relation(fields: [account_user_id], references: [user_id], onDelete: Cascade)
  account_user_id             Int     @unique
  account_verified            Boolean @default(false)
  account_verified_code       String  @default(uuid())
  account_two_factor          Boolean @default(false)
  account_two_factor_code     String  @default(uuid())
  account_reset_password_code String  @default(uuid())
}

model Goal {
  goal_id          Int     @id @default(autoincrement())
  goal_user        User    @relation(fields: [goal_user_id], references: [user_id], onDelete: Cascade)
  goal_user_id     Int
  goal_title       String
  goal_description String?
  goal_achieved    Boolean @default(false)
  goal_sub_goal    Goal?   @relation("GoalSubGoals", fields: [goal_sub_goal_id], references: [goal_id], onDelete: Cascade)
  goal_sub_goal_id Int?
  goal_sub_goals   Goal[]  @relation("GoalSubGoals")
}

enum Target {
  number
  curency
  milestone
  done_not_done
}

model GoalTarget {
  goal_target_id       Int           @id @default(autoincrement())
  goal_target_type     Target
  goal_target_value    Int?
  goal_current_value   Int?
  goal_target_achieved Boolean?
  goal_target_date     DateTime      @default(now())
  goal_target_tasks    TargetTasks[]
}

model TargetTasks {
  target_tasks_id       Int        @id @default(autoincrement())
  target_tasks_target   GoalTarget @relation(fields: [target_task_target_id], references: [goal_target_id], onDelete: Cascade)
  target_task_target_id Int
  target_task_name      String
  target_task_done      Boolean
}

enum Type {
  daily
  weekly
  monthly
  yearly
}

model Streak {
  streak_id            Int               @id @default(autoincrement())
  streak_current_count Int               @default(0)
  streak_type          Type
  streak_starttime     DateTime
  streak_endtime       DateTime?
  streak_user          User              @relation(fields: [streak_user_id], references: [user_id], onDelete: Cascade)
  streak_user_id       Int
  streak_updated_at    DateTime          @default(now()) @updatedAt
  streak_analytics     AnalyticsTracker? @relation(fields: [streak_analytics_id], references: [analytics_id], onDelete: Cascade)
  streak_analytics_id  Int?
}

model AnalyticsTracker {
  analytics_id              Int      @id @default(autoincrement())
  analytics_user            User     @relation(fields: [analytics_user_id], references: [user_id], onDelete: Cascade)
  analytics_user_id         Int
  analytics_goals_achieved  Int      @default(0)
  analytics_progress_logged Int      @default(0)
  analytics_longest_streak  Int      @default(0)
  analytics_streaks         Streak[]
}
